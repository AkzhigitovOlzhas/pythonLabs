import math


def distance(x1, x2, x3, x4):
    return math.sqrt(math.pow((x3 - x1), 2) + math.pow(x4 - x2, 2))


def power(a, n):
    res = 1
    for i in range(n):
        res *= a
    return res


def capitalize(word):
    return chr(ord(word[0]) - 32) + word[1:]


def reverse():
    x = int(input())
    if x != 0:
        reverse()
    print(x)


def fib(n):
    if n in (1, 2):
        return 1
    return fib(n - 1) + fib(n - 2)


# Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1,
# y1, x2, y2), вычисляющая расстояние между точкой (x1,y1) и (x2,y2). Считайте
# четыре действительных числа и выведите результат работы этой функции.
# Если вы не знаете, как решить эту задачу, то вы, возможно, не изучали в школе
# теорему Пифагора. Попробуйте прочитать о ней на Википедии.
a = [int(input('Введите координату ' + 'x' + str(i) + ': ')) for i in range(1, 5)]
print('Расстояние:', distance(a[0], a[1], a[2], a[3]))

# Дано действительное положительное число a и целоe число n.
# Вычислите a^n. Решение оформите в виде функции power(a, n).
# Стандартной функцией возведения в степень пользоваться нельзя.
s = [int(i) for i in input('Введите число^степень: ').split('^')]
print(power(s[0], s[1]))

# Напишите функцию capitalize(), которая принимает слово из маленьких латинских
# букв и возвращает его же, меняя первую букву на большую.
# Например, print(capitalize('word')) должно печатать слово Word.
# На вход подаётся строка, состоящая из слов, разделённых одним пробелом. Слова
# состоят из маленьких латинских букв. Напечатайте исходную строку, сделав так,
# чтобы каждое слово начиналось с большой буквы. При этом используйте вашу
# функцию capitalize().
# Напомним, что в Питоне есть функция ord(), которая по символу возвращает его
# код в таблице ASCII, и функция chr(), которая по коду символа возвращает сам
# символ. Например, ord('a') == 97, chr(97) == 'a'.
words = input().split()
result = []
for i in words:
    result.append(capitalize(i))
print(' '.join(result))

# Дана последовательность целых чисел, заканчивающаяся числом 0. Выведите эту
# последовательность в обратном порядке.
# При решении этой задачи нельзя пользоваться массивами и прочими
# динамическими структурами данных. Рекурсия вам поможет.
reverse()

# Напишите функцию fib(n), которая по данному целому неотрицательному n
# возвращает n-e число Фибоначчи. В этой задаче нельзя использовать циклы —
# используйте рекурсию.
print('Фибоначчи: ' + str(fib(int(input('Введите число n: ')))))
